/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import Models.Detalleventa;
import Models.DetalleventaPK;
import Models.ModeloTablaCarrito;
import Models.Productos;
import Models.Ticket;
import Models.Tpv;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import jpaControllers.DetalleventaJpaController;
import jpaControllers.ProductosJpaController;
import jpaControllers.TicketJpaController;
import jpaControllers.TpvJpaController;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author miguel
 */
public class VentanaCarrito extends javax.swing.JDialog {

    private static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("repaso_DAWFoodFinal_jar_1.0-SNAPSHOTPU");
    private static final ProductosJpaController pjc = new ProductosJpaController(emf);
    private static final TpvJpaController tjc = new TpvJpaController(emf);
    private static final TicketJpaController tijc = new TicketJpaController(emf);
    private static final DetalleventaJpaController dtjc = new DetalleventaJpaController(emf);

    public static Map<Productos, Integer> carritoMap;

    public VentanaCarrito(Cliente parent, boolean modal) {
        super(parent, modal);
        this.carritoMap = parent.getCarritoMap();
        initComponents();
        setLocationRelativeTo(parent);
        Map<Productos, Integer> carritoMap = parent.getCarritoMap();
        cargarDatosJTable();
        calcularPrecioFinal();
    }

    public static Map<Productos, Integer> getCarritoMap() {
        return carritoMap;
    }

    public static String getPrecioFinal() {
        return jTextFieldPrecioFinal.getText().trim();
    }
    
    /**
     * Creates new form VentanaCarrito
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCarrito = new javax.swing.JTable();
        jButtonCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonCerrar1 = new javax.swing.JButton();
        jButtonCerrar2 = new javax.swing.JButton();
        jButtonFinalizarCompra = new javax.swing.JButton();
        jTextFieldPrecioFinal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jTableCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableCarrito);

        jButtonCerrar.setBackground(new java.awt.Color(153, 0, 0));
        jButtonCerrar.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButtonCerrar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("En el carrito puedes finalizar la compra o quitar productos del carrito.");

        jButtonCerrar1.setBackground(new java.awt.Color(255, 153, 153));
        jButtonCerrar1.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButtonCerrar1.setForeground(new java.awt.Color(0, 0, 0));
        jButtonCerrar1.setText("Quirtar del carrito");
        jButtonCerrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrar1ActionPerformed(evt);
            }
        });

        jButtonCerrar2.setBackground(new java.awt.Color(255, 153, 153));
        jButtonCerrar2.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButtonCerrar2.setForeground(new java.awt.Color(0, 0, 0));
        jButtonCerrar2.setText("Vaciar carrito");
        jButtonCerrar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrar2ActionPerformed(evt);
            }
        });

        jButtonFinalizarCompra.setBackground(new java.awt.Color(0, 153, 153));
        jButtonFinalizarCompra.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButtonFinalizarCompra.setForeground(new java.awt.Color(255, 255, 255));
        jButtonFinalizarCompra.setText("Finalizar compra");
        jButtonFinalizarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinalizarCompraActionPerformed(evt);
            }
        });

        jTextFieldPrecioFinal.setBackground(new java.awt.Color(213, 213, 213));
        jTextFieldPrecioFinal.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldPrecioFinal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Precio final:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonFinalizarCompra)
                            .addComponent(jButtonCerrar2)
                            .addComponent(jButtonCerrar1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonCerrar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonCerrar1, jButtonCerrar2, jButtonFinalizarCompra});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButtonCerrar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCerrar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFinalizarCompra)
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCerrar)
                        .addContainerGap())))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonCerrar1, jButtonCerrar2, jButtonFinalizarCompra});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jButtonCerrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrar1ActionPerformed
        quitarDelCarrito();
    }//GEN-LAST:event_jButtonCerrar1ActionPerformed

    private void jButtonCerrar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrar2ActionPerformed
        vaciarCarrito();
    }//GEN-LAST:event_jButtonCerrar2ActionPerformed

    private void jButtonFinalizarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinalizarCompraActionPerformed
        Ticket t1 = generarTicket();
        modificarStock();
        generarDetalleVenta(t1);
        Cliente.cargarDatosJTable();
        filesUtils.GenerarTicket.ticketString();
        dispose();
    }//GEN-LAST:event_jButtonFinalizarCompraActionPerformed

    public void cargarTabla(Cliente parent){
        parent.cargarDatosJTable();
    }
    
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonCerrar1;
    private javax.swing.JButton jButtonCerrar2;
    private javax.swing.JButton jButtonFinalizarCompra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCarrito;
    private static javax.swing.JTextField jTextFieldPrecioFinal;
    // End of variables declaration//GEN-END:variables

    public void cargarDatosJTable() {
        // Se crea el modelo de datos que contendrá el JTable
        // Este modelo se rellena de datos y luego se asocia al JTable
        ModeloTablaCarrito modelo = new ModeloTablaCarrito();

        // Array de object con el número de columnas del jtable
        // Para guardar cada campo de cada Persona de la lista
        Object[] fila = new Object[modelo.getColumnCount()];

        try {
            for (Map.Entry<Productos, Integer> entry : carritoMap.entrySet()) {
                Productos key = entry.getKey();
                Integer value = entry.getValue();

                fila[0] = key.getIdProducto();
                fila[1] = key.getDescripcion();
                fila[2] = key.getIva();
                fila[3] = key.getPrecio();
                fila[4] = value;

                modelo.addRow(fila);
            }
            // Agregamos esta fila a nuestro modelo
        } catch (Exception e) {
        }
        // Iteramos por la lista y asignamos a
        // cada celda del array el valor del atributo de esa persona
        // Decimos al JTable el modelo a usar
        jTableCarrito.setModel(modelo);
    }

    public void quitarDelCarrito() {

        try {
            int row = jTableCarrito.getSelectedRow();

            int id = (int) jTableCarrito.getValueAt(row, 0);
            int cant = (int) jTableCarrito.getValueAt(row, 4);

            Productos p1 = pjc.findProductos(id);

            if (carritoMap.containsKey(p1) && cant > 1) {
                Integer value = carritoMap.get(p1);
                // Decrementar el valor y actualizar el mapa
                carritoMap.put(p1, value - 1);
            } else if (cant == 1) {
                carritoMap.remove(p1);
            }

            cargarDatosJTable();
            calcularPrecioFinal();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No has seleccionado un producto.");
        }
    }

    public void vaciarCarrito() {

        try {
            carritoMap.clear();
            jTextFieldPrecioFinal.setText("");
            cargarDatosJTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al borrar los productos.");
        }
    }

    public void calcularPrecioFinal() {

        double precioFinal = 0;
        double precioProd = 0;
        double cant = 0;

        try {
            for (Map.Entry<Productos, Integer> entry : carritoMap.entrySet()) {
                Productos key = entry.getKey();
                Integer value = entry.getValue();

                precioProd = Double.parseDouble(key.getPrecio().toString());
                cant = Double.parseDouble(value.toString());

                precioFinal += (precioProd * cant);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al calcular el precio final.");
        }

        DecimalFormat formato = new DecimalFormat("#.00");

        String precioFormateado = formato.format(precioFinal);

        jTextFieldPrecioFinal.setText(precioFormateado + " €");
    }

    public Ticket generarTicket() {

        EntityManager em = emf.createEntityManager();

        Ticket t1 = new Ticket();

        LocalDate localDate = LocalDate.now();
        // Convertir LocalDate a Instant
        Instant instant = localDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
        // Crear un objeto Date a partir del Instant
        Date fecha = Date.from(instant);
        t1.setFechaOperacion(fecha);

        //hora
        LocalDateTime ldt = LocalDateTime.now();
        String hora = ldt.getHour() + "-" + ldt.getMinute() + "-" + ldt.getSecond();
        t1.setHoraOperacion(hora);

        //cod transaccion
        t1.setCodTransaccion(RandomStringUtils.randomAlphanumeric(10));

        //tpv
        List<Tpv> tpvList = em.createNamedQuery("Tpv.findAll", Tpv.class).getResultList();
        Tpv tpv = tpvList.get(0);
        t1.setIdTpv(tpv);

        //precio
        String[] parts = jTextFieldPrecioFinal.getText().trim().split(" ");

        String[] partsTmp = parts[0].trim().split(",");
        String precioFinalString = partsTmp[0] + "." + partsTmp[1];

        BigDecimal bd = new BigDecimal(Double.parseDouble(precioFinalString));
        t1.setImporteTotal(bd);
        tijc.create(t1);

        return t1;
    }

    public void generarDetalleVenta(Ticket t1) {

        for (Map.Entry<Productos, Integer> entry : carritoMap.entrySet()) {
            try {
                Productos key = entry.getKey();
                Integer value = entry.getValue();

                DetalleventaPK dvpk = new DetalleventaPK(key.getIdProducto(), t1.getIdTicket());

                Detalleventa dvTmp = new Detalleventa(dvpk, WIDTH, key, t1);
                dvTmp.setCantidadProducto(value);
                dtjc.create(dvTmp);
            } catch (Exception ex) {
                Logger.getLogger(VentanaCarrito.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void modificarStock() {

        for (Map.Entry<Productos, Integer> entry : carritoMap.entrySet()) {
            try {
                Productos key = entry.getKey();
                Integer value = entry.getValue();

                if (key.getStock() >= value) {
                    key.setStock(key.getStock() - value);
                    Productos p1 = key;
                    pjc.edit(p1);
                }

            } catch (Exception ex) {
                Logger.getLogger(VentanaCarrito.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
